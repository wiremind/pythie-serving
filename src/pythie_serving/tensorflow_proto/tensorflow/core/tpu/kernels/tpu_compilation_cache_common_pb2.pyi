"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2020 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import sys
import typing

if sys.version_info >= (3, 10):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class _CompilationCacheFetchTarget:
    ValueType = typing.NewType("ValueType", builtins.int)
    V: typing_extensions.TypeAlias = ValueType

class _CompilationCacheFetchTargetEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[_CompilationCacheFetchTarget.ValueType], builtins.type):
    DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
    INVALID: _CompilationCacheFetchTarget.ValueType  # 0
    MAIN: _CompilationCacheFetchTarget.ValueType  # 1
    SHARDING: _CompilationCacheFetchTarget.ValueType  # 2
    UNSHARDING: _CompilationCacheFetchTarget.ValueType  # 3

class CompilationCacheFetchTarget(_CompilationCacheFetchTarget, metaclass=_CompilationCacheFetchTargetEnumTypeWrapper):
    """Target type for compilation cache fetch operation."""

INVALID: CompilationCacheFetchTarget.ValueType  # 0
MAIN: CompilationCacheFetchTarget.ValueType  # 1
SHARDING: CompilationCacheFetchTarget.ValueType  # 2
UNSHARDING: CompilationCacheFetchTarget.ValueType  # 3
global___CompilationCacheFetchTarget = CompilationCacheFetchTarget

@typing_extensions.final
class TpuCompilationUidAndIndex(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    UID_FIELD_NUMBER: builtins.int
    PROTO_INDEX_FIELD_NUMBER: builtins.int
    uid: builtins.int
    proto_index: builtins.int
    def __init__(
        self,
        *,
        uid: builtins.int = ...,
        proto_index: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["proto_index", b"proto_index", "uid", b"uid"]) -> None: ...

global___TpuCompilationUidAndIndex = TpuCompilationUidAndIndex

@typing_extensions.final
class GetTpuProgramRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    UID_AND_INDEX_FIELD_NUMBER: builtins.int
    FETCH_TARGET_FIELD_NUMBER: builtins.int
    key: builtins.str
    @property
    def uid_and_index(self) -> global___TpuCompilationUidAndIndex: ...
    fetch_target: global___CompilationCacheFetchTarget.ValueType
    def __init__(
        self,
        *,
        key: builtins.str = ...,
        uid_and_index: global___TpuCompilationUidAndIndex | None = ...,
        fetch_target: global___CompilationCacheFetchTarget.ValueType = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["key", b"key", "key_oneof", b"key_oneof", "uid_and_index", b"uid_and_index"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["fetch_target", b"fetch_target", "key", b"key", "key_oneof", b"key_oneof", "uid_and_index", b"uid_and_index"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["key_oneof", b"key_oneof"]) -> typing_extensions.Literal["key", "uid_and_index"] | None: ...

global___GetTpuProgramRequest = GetTpuProgramRequest
