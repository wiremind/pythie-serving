"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import tensorflow.core.data.dataset_pb2
import tensorflow.core.data.service.common_pb2
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class ProcessTaskRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TASK_FIELD_NUMBER: builtins.int
    @property
    def task(self) -> tensorflow.core.data.service.common_pb2.TaskDef: ...
    def __init__(self,
        *,
        task: typing.Optional[tensorflow.core.data.service.common_pb2.TaskDef] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["task",b"task"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["task",b"task"]) -> None: ...
global___ProcessTaskRequest = ProcessTaskRequest

class ProcessTaskResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    def __init__(self,
        ) -> None: ...
global___ProcessTaskResponse = ProcessTaskResponse

class GetElementRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TASK_ID_FIELD_NUMBER: builtins.int
    CONSUMER_INDEX_FIELD_NUMBER: builtins.int
    ROUND_INDEX_FIELD_NUMBER: builtins.int
    SKIPPED_PREVIOUS_ROUND_FIELD_NUMBER: builtins.int
    ALLOW_SKIP_FIELD_NUMBER: builtins.int
    task_id: builtins.int
    """The task to fetch an element from."""

    consumer_index: builtins.int
    round_index: builtins.int
    skipped_previous_round: builtins.bool
    """Whether the previous round was skipped. This information is needed by the
    worker to recover after restarts.
    """

    allow_skip: builtins.bool
    """Whether to skip the round if data isn't ready fast enough."""

    def __init__(self,
        *,
        task_id: builtins.int = ...,
        consumer_index: builtins.int = ...,
        round_index: builtins.int = ...,
        skipped_previous_round: builtins.bool = ...,
        allow_skip: builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["consumer_index",b"consumer_index","optional_consumer_index",b"optional_consumer_index","optional_round_index",b"optional_round_index","round_index",b"round_index"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["allow_skip",b"allow_skip","consumer_index",b"consumer_index","optional_consumer_index",b"optional_consumer_index","optional_round_index",b"optional_round_index","round_index",b"round_index","skipped_previous_round",b"skipped_previous_round","task_id",b"task_id"]) -> None: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["optional_consumer_index",b"optional_consumer_index"]) -> typing.Optional[typing_extensions.Literal["consumer_index"]]: ...
    @typing.overload
    def WhichOneof(self, oneof_group: typing_extensions.Literal["optional_round_index",b"optional_round_index"]) -> typing.Optional[typing_extensions.Literal["round_index"]]: ...
global___GetElementRequest = GetElementRequest

class GetElementResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    COMPRESSED_FIELD_NUMBER: builtins.int
    UNCOMPRESSED_FIELD_NUMBER: builtins.int
    ELEMENT_INDEX_FIELD_NUMBER: builtins.int
    END_OF_SEQUENCE_FIELD_NUMBER: builtins.int
    SKIP_TASK_FIELD_NUMBER: builtins.int
    @property
    def compressed(self) -> tensorflow.core.data.dataset_pb2.CompressedElement: ...
    @property
    def uncompressed(self) -> tensorflow.core.data.dataset_pb2.UncompressedElement: ...
    element_index: builtins.int
    """The element's index within the task it came from."""

    end_of_sequence: builtins.bool
    """Boolean to indicate whether the iterator has been exhausted."""

    skip_task: builtins.bool
    """Indicates whether the round was skipped."""

    def __init__(self,
        *,
        compressed: typing.Optional[tensorflow.core.data.dataset_pb2.CompressedElement] = ...,
        uncompressed: typing.Optional[tensorflow.core.data.dataset_pb2.UncompressedElement] = ...,
        element_index: builtins.int = ...,
        end_of_sequence: builtins.bool = ...,
        skip_task: builtins.bool = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["compressed",b"compressed","element",b"element","uncompressed",b"uncompressed"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["compressed",b"compressed","element",b"element","element_index",b"element_index","end_of_sequence",b"end_of_sequence","skip_task",b"skip_task","uncompressed",b"uncompressed"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["element",b"element"]) -> typing.Optional[typing_extensions.Literal["compressed","uncompressed"]]: ...
global___GetElementResponse = GetElementResponse

class GetWorkerTasksRequest(google.protobuf.message.Message):
    """Named GetWorkerTasks to avoid conflicting with GetTasks in dispatcher.proto"""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    def __init__(self,
        ) -> None: ...
global___GetWorkerTasksRequest = GetWorkerTasksRequest

class GetWorkerTasksResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TASKS_FIELD_NUMBER: builtins.int
    @property
    def tasks(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[tensorflow.core.data.service.common_pb2.TaskInfo]: ...
    def __init__(self,
        *,
        tasks: typing.Optional[typing.Iterable[tensorflow.core.data.service.common_pb2.TaskInfo]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["tasks",b"tasks"]) -> None: ...
global___GetWorkerTasksResponse = GetWorkerTasksResponse
