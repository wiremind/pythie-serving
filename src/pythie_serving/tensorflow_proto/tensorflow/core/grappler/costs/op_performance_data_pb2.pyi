"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2017 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys
import tensorflow.core.framework.attr_value_pb2
import tensorflow.core.framework.tensor_pb2
import tensorflow.core.framework.tensor_shape_pb2
import tensorflow.core.framework.types_pb2
import tensorflow.core.protobuf.device_properties_pb2

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class SessionInfo(google.protobuf.message.Message):
    """Description of the session when an op is run."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    INTRA_OP_PARALLELISM_FIELD_NUMBER: builtins.int
    intra_op_parallelism: builtins.int
    def __init__(
        self,
        *,
        intra_op_parallelism: builtins.int = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["intra_op_parallelism", b"intra_op_parallelism"]) -> None: ...

global___SessionInfo = SessionInfo

@typing_extensions.final
class OpInfo(google.protobuf.message.Message):
    """Description of an operation as well as the parameters expected to impact its
    performance.
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class AttrEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        @property
        def value(self) -> tensorflow.core.framework.attr_value_pb2.AttrValue: ...
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: tensorflow.core.framework.attr_value_pb2.AttrValue | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    @typing_extensions.final
    class TensorProperties(google.protobuf.message.Message):
        """Input data types, shapes and values if known."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        DTYPE_FIELD_NUMBER: builtins.int
        SHAPE_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        dtype: tensorflow.core.framework.types_pb2.DataType.ValueType
        @property
        def shape(self) -> tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto: ...
        @property
        def value(self) -> tensorflow.core.framework.tensor_pb2.TensorProto: ...
        def __init__(
            self,
            *,
            dtype: tensorflow.core.framework.types_pb2.DataType.ValueType = ...,
            shape: tensorflow.core.framework.tensor_shape_pb2.TensorShapeProto | None = ...,
            value: tensorflow.core.framework.tensor_pb2.TensorProto | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["shape", b"shape", "value", b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["dtype", b"dtype", "shape", b"shape", "value", b"value"]) -> None: ...

    OP_FIELD_NUMBER: builtins.int
    ATTR_FIELD_NUMBER: builtins.int
    INPUTS_FIELD_NUMBER: builtins.int
    OUTPUTS_FIELD_NUMBER: builtins.int
    DEVICE_FIELD_NUMBER: builtins.int
    SESSION_INFO_FIELD_NUMBER: builtins.int
    op: builtins.str
    """The operation name.  There may be custom parameters in attrs."""
    @property
    def attr(self) -> google.protobuf.internal.containers.MessageMap[builtins.str, tensorflow.core.framework.attr_value_pb2.AttrValue]:
        """Custom parameters impacting the behavior of the op."""
    @property
    def inputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___OpInfo.TensorProperties]: ...
    @property
    def outputs(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___OpInfo.TensorProperties]:
        """Optional description of the op outputs"""
    @property
    def device(self) -> tensorflow.core.protobuf.device_properties_pb2.DeviceProperties:
        """Device on which the operation is run."""
    @property
    def session_info(self) -> global___SessionInfo:
        """Information about the session configs."""
    def __init__(
        self,
        *,
        op: builtins.str = ...,
        attr: collections.abc.Mapping[builtins.str, tensorflow.core.framework.attr_value_pb2.AttrValue] | None = ...,
        inputs: collections.abc.Iterable[global___OpInfo.TensorProperties] | None = ...,
        outputs: collections.abc.Iterable[global___OpInfo.TensorProperties] | None = ...,
        device: tensorflow.core.protobuf.device_properties_pb2.DeviceProperties | None = ...,
        session_info: global___SessionInfo | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["device", b"device", "session_info", b"session_info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["attr", b"attr", "device", b"device", "inputs", b"inputs", "op", b"op", "outputs", b"outputs", "session_info", b"session_info"]) -> None: ...

global___OpInfo = OpInfo

@typing_extensions.final
class NormalDistribution(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MU_FIELD_NUMBER: builtins.int
    SIGMA_FIELD_NUMBER: builtins.int
    mu: builtins.float
    sigma: builtins.float
    def __init__(
        self,
        *,
        mu: builtins.float = ...,
        sigma: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["mu", b"mu", "sigma", b"sigma"]) -> None: ...

global___NormalDistribution = NormalDistribution

@typing_extensions.final
class LogNormalDistribution(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    MU_FIELD_NUMBER: builtins.int
    SIGMA_FIELD_NUMBER: builtins.int
    mu: builtins.float
    sigma: builtins.float
    def __init__(
        self,
        *,
        mu: builtins.float = ...,
        sigma: builtins.float = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["mu", b"mu", "sigma", b"sigma"]) -> None: ...

global___LogNormalDistribution = LogNormalDistribution

@typing_extensions.final
class OpPerformance(google.protobuf.message.Message):
    """Performance data for tensorflow operations"""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class OpMemory(google.protobuf.message.Message):
        """Memory usage data for a tensorflow operation."""

        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        OUTPUT_MEMORY_FIELD_NUMBER: builtins.int
        TEMP_MEMORY_FIELD_NUMBER: builtins.int
        PERSISTENT_MEMORY_FIELD_NUMBER: builtins.int
        DEVICE_TEMP_MEMORY_FIELD_NUMBER: builtins.int
        DEVICE_PERSISTENT_MEMORY_FIELD_NUMBER: builtins.int
        @property
        def output_memory(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
            """The output information may have memory usage and output shapes."""
        temp_memory: builtins.int
        """Temp and persistent memory allocated by this node."""
        persistent_memory: builtins.int
        device_temp_memory: builtins.int
        device_persistent_memory: builtins.int
        def __init__(
            self,
            *,
            output_memory: collections.abc.Iterable[builtins.int] | None = ...,
            temp_memory: builtins.int = ...,
            persistent_memory: builtins.int = ...,
            device_temp_memory: builtins.int = ...,
            device_persistent_memory: builtins.int = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["device_persistent_memory", b"device_persistent_memory", "device_temp_memory", b"device_temp_memory", "output_memory", b"output_memory", "persistent_memory", b"persistent_memory", "temp_memory", b"temp_memory"]) -> None: ...

    OP_FIELD_NUMBER: builtins.int
    SESSION_INFO_FIELD_NUMBER: builtins.int
    NODE_FIELD_NUMBER: builtins.int
    TEMPORARY_MEMORY_SIZE_FIELD_NUMBER: builtins.int
    COMPUTE_COST_FIELD_NUMBER: builtins.int
    COMPUTE_TIME_FIELD_NUMBER: builtins.int
    MEMORY_TIME_FIELD_NUMBER: builtins.int
    COMPUTE_EFFICIENCY_FIELD_NUMBER: builtins.int
    MEMORY_EFFICIENCY_FIELD_NUMBER: builtins.int
    EXECUTION_TIME_NORMAL_FIELD_NUMBER: builtins.int
    EXECUTION_TIME_LOG_NORMAL_FIELD_NUMBER: builtins.int
    OP_MEMORY_FIELD_NUMBER: builtins.int
    @property
    def op(self) -> global___OpInfo:
        """The op"""
    @property
    def session_info(self) -> global___SessionInfo:
        """Information about the session configs."""
    node: builtins.str
    """The node name (optional). Makes it easier to associate the performance data
    with a specific graph node.
    """
    temporary_memory_size: builtins.int
    """Temporary memory used by this node (in bytes)."""
    compute_cost: builtins.int
    """Time it takes to run the op (in nanoseconds)."""
    compute_time: builtins.int
    """Analytical compute cost (in nanoseconds)."""
    memory_time: builtins.int
    """Analytical memory access cost (in nanoseconds)."""
    compute_efficiency: builtins.float
    """Percentage of theoretical compute performance."""
    memory_efficiency: builtins.float
    """Percentage of theoretical memory performance."""
    @property
    def execution_time_normal(self) -> global___NormalDistribution: ...
    @property
    def execution_time_log_normal(self) -> global___LogNormalDistribution: ...
    @property
    def op_memory(self) -> global___OpPerformance.OpMemory: ...
    def __init__(
        self,
        *,
        op: global___OpInfo | None = ...,
        session_info: global___SessionInfo | None = ...,
        node: builtins.str = ...,
        temporary_memory_size: builtins.int = ...,
        compute_cost: builtins.int = ...,
        compute_time: builtins.int = ...,
        memory_time: builtins.int = ...,
        compute_efficiency: builtins.float = ...,
        memory_efficiency: builtins.float = ...,
        execution_time_normal: global___NormalDistribution | None = ...,
        execution_time_log_normal: global___LogNormalDistribution | None = ...,
        op_memory: global___OpPerformance.OpMemory | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["execution_time", b"execution_time", "execution_time_log_normal", b"execution_time_log_normal", "execution_time_normal", b"execution_time_normal", "op", b"op", "op_memory", b"op_memory", "session_info", b"session_info"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["compute_cost", b"compute_cost", "compute_efficiency", b"compute_efficiency", "compute_time", b"compute_time", "execution_time", b"execution_time", "execution_time_log_normal", b"execution_time_log_normal", "execution_time_normal", b"execution_time_normal", "memory_efficiency", b"memory_efficiency", "memory_time", b"memory_time", "node", b"node", "op", b"op", "op_memory", b"op_memory", "session_info", b"session_info", "temporary_memory_size", b"temporary_memory_size"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["execution_time", b"execution_time"]) -> typing_extensions.Literal["execution_time_normal", "execution_time_log_normal"] | None: ...

global___OpPerformance = OpPerformance

@typing_extensions.final
class OpPerformanceList(google.protobuf.message.Message):
    """A collection of OpPerformance data points."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    OP_PERFORMANCE_FIELD_NUMBER: builtins.int
    @property
    def op_performance(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___OpPerformance]: ...
    def __init__(
        self,
        *,
        op_performance: collections.abc.Iterable[global___OpPerformance] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["op_performance", b"op_performance"]) -> None: ...

global___OpPerformanceList = OpPerformanceList
