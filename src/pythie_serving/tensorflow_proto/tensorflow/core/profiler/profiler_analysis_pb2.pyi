"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import collections.abc
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import sys
import tensorflow.core.profiler.profiler_service_pb2

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class NewProfileSessionRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REQUEST_FIELD_NUMBER: builtins.int
    REPOSITORY_ROOT_FIELD_NUMBER: builtins.int
    HOSTS_FIELD_NUMBER: builtins.int
    SESSION_ID_FIELD_NUMBER: builtins.int
    @property
    def request(self) -> tensorflow.core.profiler.profiler_service_pb2.ProfileRequest: ...
    repository_root: builtins.str
    """The place where we will dump profile data. We will normally use
    MODEL_DIR/plugins/profile as the repository root.
    """
    @property
    def hosts(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """host or host:port, port will be ignored."""
    session_id: builtins.str
    def __init__(
        self,
        *,
        request: tensorflow.core.profiler.profiler_service_pb2.ProfileRequest | None = ...,
        repository_root: builtins.str = ...,
        hosts: collections.abc.Iterable[builtins.str] | None = ...,
        session_id: builtins.str = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["request", b"request"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["hosts", b"hosts", "repository_root", b"repository_root", "request", b"request", "session_id", b"session_id"]) -> None: ...

global___NewProfileSessionRequest = NewProfileSessionRequest

@typing_extensions.final
class NewProfileSessionResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ERROR_MESSAGE_FIELD_NUMBER: builtins.int
    EMPTY_TRACE_FIELD_NUMBER: builtins.int
    error_message: builtins.str
    """Auxiliary error_message."""
    empty_trace: builtins.bool
    """Whether all hosts had returned a empty trace."""
    def __init__(
        self,
        *,
        error_message: builtins.str = ...,
        empty_trace: builtins.bool = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["empty_trace", b"empty_trace", "error_message", b"error_message"]) -> None: ...

global___NewProfileSessionResponse = NewProfileSessionResponse

@typing_extensions.final
class EnumProfileSessionsAndToolsRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    REPOSITORY_ROOT_FIELD_NUMBER: builtins.int
    repository_root: builtins.str
    def __init__(
        self,
        *,
        repository_root: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["repository_root", b"repository_root"]) -> None: ...

global___EnumProfileSessionsAndToolsRequest = EnumProfileSessionsAndToolsRequest

@typing_extensions.final
class ProfileSessionInfo(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SESSION_ID_FIELD_NUMBER: builtins.int
    AVAILABLE_TOOLS_FIELD_NUMBER: builtins.int
    session_id: builtins.str
    @property
    def available_tools(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.str]:
        """Which tool data is available for consumption."""
    def __init__(
        self,
        *,
        session_id: builtins.str = ...,
        available_tools: collections.abc.Iterable[builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["available_tools", b"available_tools", "session_id", b"session_id"]) -> None: ...

global___ProfileSessionInfo = ProfileSessionInfo

@typing_extensions.final
class EnumProfileSessionsAndToolsResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ERROR_MESSAGE_FIELD_NUMBER: builtins.int
    SESSIONS_FIELD_NUMBER: builtins.int
    error_message: builtins.str
    """Auxiliary error_message."""
    @property
    def sessions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___ProfileSessionInfo]:
        """If success, the returned sessions information are stored here."""
    def __init__(
        self,
        *,
        error_message: builtins.str = ...,
        sessions: collections.abc.Iterable[global___ProfileSessionInfo] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["error_message", b"error_message", "sessions", b"sessions"]) -> None: ...

global___EnumProfileSessionsAndToolsResponse = EnumProfileSessionsAndToolsResponse

@typing_extensions.final
class ProfileSessionDataRequest(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class ParametersEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.str
        value: builtins.str
        def __init__(
            self,
            *,
            key: builtins.str = ...,
            value: builtins.str = ...,
        ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key", b"key", "value", b"value"]) -> None: ...

    REPOSITORY_ROOT_FIELD_NUMBER: builtins.int
    SESSION_ID_FIELD_NUMBER: builtins.int
    HOST_NAME_FIELD_NUMBER: builtins.int
    TOOL_NAME_FIELD_NUMBER: builtins.int
    PARAMETERS_FIELD_NUMBER: builtins.int
    repository_root: builtins.str
    """The place where we will read profile data. We will normally use
    MODEL_DIR/plugins/profile as the repository root.
    """
    session_id: builtins.str
    host_name: builtins.str
    """Which host the data is associated. if empty, data from all hosts are
    aggregated.
    """
    tool_name: builtins.str
    """Which tool"""
    @property
    def parameters(self) -> google.protobuf.internal.containers.ScalarMap[builtins.str, builtins.str]:
        """Tool's specific parameters. e.g. TraceViewer's viewport etc"""
    def __init__(
        self,
        *,
        repository_root: builtins.str = ...,
        session_id: builtins.str = ...,
        host_name: builtins.str = ...,
        tool_name: builtins.str = ...,
        parameters: collections.abc.Mapping[builtins.str, builtins.str] | None = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["host_name", b"host_name", "parameters", b"parameters", "repository_root", b"repository_root", "session_id", b"session_id", "tool_name", b"tool_name"]) -> None: ...

global___ProfileSessionDataRequest = ProfileSessionDataRequest

@typing_extensions.final
class ProfileSessionDataResponse(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    ERROR_MESSAGE_FIELD_NUMBER: builtins.int
    OUTPUT_FORMAT_FIELD_NUMBER: builtins.int
    OUTPUT_FIELD_NUMBER: builtins.int
    error_message: builtins.str
    """Auxiliary error_message."""
    output_format: builtins.str
    """Output format. e.g. "json" or "proto" or "blob" """
    output: builtins.bytes
    """TODO(jiesun): figure out whether to put bytes or oneof tool specific proto."""
    def __init__(
        self,
        *,
        error_message: builtins.str = ...,
        output_format: builtins.str = ...,
        output: builtins.bytes = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["error_message", b"error_message", "output", b"output", "output_format", b"output_format"]) -> None: ...

global___ProfileSessionDataResponse = ProfileSessionDataResponse
