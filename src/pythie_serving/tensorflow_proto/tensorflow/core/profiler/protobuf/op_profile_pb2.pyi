"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class Profile(google.protobuf.message.Message):
    """Profile is the top-level data that summarizes a program."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    BY_CATEGORY_FIELD_NUMBER: builtins.int
    BY_PROGRAM_FIELD_NUMBER: builtins.int
    DEVICE_TYPE_FIELD_NUMBER: builtins.int
    BY_CATEGORY_EXCLUDE_IDLE_FIELD_NUMBER: builtins.int
    BY_PROGRAM_EXCLUDE_IDLE_FIELD_NUMBER: builtins.int
    @property
    def by_category(self) -> global___Node:
        """Root of a profile broken down by instruction category."""
        pass
    @property
    def by_program(self) -> global___Node:
        """Root of a profile broken down by program."""
        pass
    device_type: typing.Text
    """Device type."""

    @property
    def by_category_exclude_idle(self) -> global___Node:
        """Exclude idle ops."""
        pass
    @property
    def by_program_exclude_idle(self) -> global___Node: ...
    def __init__(self,
        *,
        by_category: typing.Optional[global___Node] = ...,
        by_program: typing.Optional[global___Node] = ...,
        device_type: typing.Text = ...,
        by_category_exclude_idle: typing.Optional[global___Node] = ...,
        by_program_exclude_idle: typing.Optional[global___Node] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["by_category",b"by_category","by_category_exclude_idle",b"by_category_exclude_idle","by_program",b"by_program","by_program_exclude_idle",b"by_program_exclude_idle"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["by_category",b"by_category","by_category_exclude_idle",b"by_category_exclude_idle","by_program",b"by_program","by_program_exclude_idle",b"by_program_exclude_idle","device_type",b"device_type"]) -> None: ...
global___Profile = Profile

class Node(google.protobuf.message.Message):
    """An entry in the profile tree. (An instruction, or set of instructions)."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class InstructionCategory(google.protobuf.message.Message):
        """A category of XLA instructions.
        name is a descriptive string, like "data formatting".
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        def __init__(self,
            ) -> None: ...

    class XLAInstruction(google.protobuf.message.Message):
        """A single XLA instruction.
        name is the unique instruction id, like "%multiply.5".
        """
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        class LayoutAnalysis(google.protobuf.message.Message):
            DESCRIPTOR: google.protobuf.descriptor.Descriptor
            class Dimension(google.protobuf.message.Message):
                DESCRIPTOR: google.protobuf.descriptor.Descriptor
                SIZE_FIELD_NUMBER: builtins.int
                ALIGNMENT_FIELD_NUMBER: builtins.int
                SEMANTICS_FIELD_NUMBER: builtins.int
                size: builtins.int
                """Size of the data in this dimension."""

                alignment: builtins.int
                """Data must be padded to a multiple of alignment."""

                semantics: typing.Text
                """What the dimension represents, e.g. "spatial"."""

                def __init__(self,
                    *,
                    size: builtins.int = ...,
                    alignment: builtins.int = ...,
                    semantics: typing.Text = ...,
                    ) -> None: ...
                def ClearField(self, field_name: typing_extensions.Literal["alignment",b"alignment","semantics",b"semantics","size",b"size"]) -> None: ...

            DIMENSIONS_FIELD_NUMBER: builtins.int
            @property
            def dimensions(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Node.XLAInstruction.LayoutAnalysis.Dimension]:
                """The physical data layout, from most-minor to most-major dimensions."""
                pass
            def __init__(self,
                *,
                dimensions: typing.Optional[typing.Iterable[global___Node.XLAInstruction.LayoutAnalysis.Dimension]] = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["dimensions",b"dimensions"]) -> None: ...

        OP_FIELD_NUMBER: builtins.int
        EXPRESSION_FIELD_NUMBER: builtins.int
        PROVENANCE_FIELD_NUMBER: builtins.int
        CATEGORY_FIELD_NUMBER: builtins.int
        LAYOUT_FIELD_NUMBER: builtins.int
        op: typing.Text
        """Opcode like %multiply"""

        expression: typing.Text
        """%multiply = [shape]multiply(operand1, operand2)"""

        provenance: typing.Text
        """Typically the TensorFlow operation name."""

        category: typing.Text
        @property
        def layout(self) -> global___Node.XLAInstruction.LayoutAnalysis:
            """Describes the physical memory layout of the instruction's primary input.
            e.g. for a convolution, this analyzes the image and ignores the kernel.
            """
            pass
        def __init__(self,
            *,
            op: typing.Text = ...,
            expression: typing.Text = ...,
            provenance: typing.Text = ...,
            category: typing.Text = ...,
            layout: typing.Optional[global___Node.XLAInstruction.LayoutAnalysis] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["layout",b"layout"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["category",b"category","expression",b"expression","layout",b"layout","op",b"op","provenance",b"provenance"]) -> None: ...

    NAME_FIELD_NUMBER: builtins.int
    METRICS_FIELD_NUMBER: builtins.int
    CHILDREN_FIELD_NUMBER: builtins.int
    CATEGORY_FIELD_NUMBER: builtins.int
    XLA_FIELD_NUMBER: builtins.int
    NUM_CHILDREN_FIELD_NUMBER: builtins.int
    name: typing.Text
    """Semantics depend on contents."""

    @property
    def metrics(self) -> global___Metrics:
        """May be omitted e.g. for fused instructions."""
        pass
    @property
    def children(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___Node]:
        """Subjected to pruning."""
        pass
    @property
    def category(self) -> global___Node.InstructionCategory: ...
    @property
    def xla(self) -> global___Node.XLAInstruction: ...
    num_children: builtins.int
    """Total number of children before pruning."""

    def __init__(self,
        *,
        name: typing.Text = ...,
        metrics: typing.Optional[global___Metrics] = ...,
        children: typing.Optional[typing.Iterable[global___Node]] = ...,
        category: typing.Optional[global___Node.InstructionCategory] = ...,
        xla: typing.Optional[global___Node.XLAInstruction] = ...,
        num_children: builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["category",b"category","contents",b"contents","metrics",b"metrics","xla",b"xla"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["category",b"category","children",b"children","contents",b"contents","metrics",b"metrics","name",b"name","num_children",b"num_children","xla",b"xla"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["contents",b"contents"]) -> typing.Optional[typing_extensions.Literal["category","xla"]]: ...
global___Node = Node

class Metrics(google.protobuf.message.Message):
    """Measurements of an operation (or aggregated set of operations).
    Metrics are always "total" rather than "self".
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TIME_FIELD_NUMBER: builtins.int
    FLOPS_FIELD_NUMBER: builtins.int
    MEMORY_BANDWIDTH_FIELD_NUMBER: builtins.int
    RAW_TIME_FIELD_NUMBER: builtins.int
    RAW_FLOPS_FIELD_NUMBER: builtins.int
    RAW_BYTES_ACCESSED_FIELD_NUMBER: builtins.int
    time: builtins.float
    """Core-time taken by this operation, as a fraction of all operations."""

    flops: builtins.float
    """Floating point computations performed by this operation, as a fraction of
    peak core FLOPS * program time. This representation has useful properties:
     - it is proportional to the number of floating point operations performed
     - utilization is flops/time
     - wasted potential flops is proportional to time - flops
     - it does not reveal the peak core FLOPS of the hardware
    """

    memory_bandwidth: builtins.float
    """The memory bandwidth used to load operands, as a fraction of
    thereotical memory bandwidth on the specific hardware.
    """

    raw_time: builtins.float
    """Elapsed core-time in picoseconds."""

    raw_flops: builtins.float
    """Total floating-point operations performed."""

    raw_bytes_accessed: builtins.float
    """Total bytes accessed (include read/write)."""

    def __init__(self,
        *,
        time: builtins.float = ...,
        flops: builtins.float = ...,
        memory_bandwidth: builtins.float = ...,
        raw_time: builtins.float = ...,
        raw_flops: builtins.float = ...,
        raw_bytes_accessed: builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["flops",b"flops","memory_bandwidth",b"memory_bandwidth","raw_bytes_accessed",b"raw_bytes_accessed","raw_flops",b"raw_flops","raw_time",b"raw_time","time",b"time"]) -> None: ...
global___Metrics = Metrics
