"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class XSpace(google.protobuf.message.Message):
    """A container of parallel XPlanes, generated by one or more profiling sources.
    Next ID: 5
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    PLANES_FIELD_NUMBER: builtins.int
    ERRORS_FIELD_NUMBER: builtins.int
    WARNINGS_FIELD_NUMBER: builtins.int
    HOSTNAMES_FIELD_NUMBER: builtins.int
    @property
    def planes(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___XPlane]: ...
    @property
    def errors(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Errors (if any) in the generation of planes."""
        pass
    @property
    def warnings(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Warnings (if any) in the generation of planes;"""
        pass
    @property
    def hostnames(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """List of hostnames that XPlanes are generated from."""
        pass
    def __init__(self,
        *,
        planes: typing.Optional[typing.Iterable[global___XPlane]] = ...,
        errors: typing.Optional[typing.Iterable[typing.Text]] = ...,
        warnings: typing.Optional[typing.Iterable[typing.Text]] = ...,
        hostnames: typing.Optional[typing.Iterable[typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["errors",b"errors","hostnames",b"hostnames","planes",b"planes","warnings",b"warnings"]) -> None: ...
global___XSpace = XSpace

class XPlane(google.protobuf.message.Message):
    """An XPlane is a container of parallel timelines (XLines), generated by a
    profiling source or by post-processing one or more XPlanes.
    Next ID: 7
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class EventMetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        @property
        def value(self) -> global___XEventMetadata: ...
        def __init__(self,
            *,
            key: builtins.int = ...,
            value: typing.Optional[global___XEventMetadata] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class StatMetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        @property
        def value(self) -> global___XStatMetadata: ...
        def __init__(self,
            *,
            key: builtins.int = ...,
            value: typing.Optional[global___XStatMetadata] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    LINES_FIELD_NUMBER: builtins.int
    EVENT_METADATA_FIELD_NUMBER: builtins.int
    STAT_METADATA_FIELD_NUMBER: builtins.int
    STATS_FIELD_NUMBER: builtins.int
    id: builtins.int
    name: typing.Text
    """Name of this line."""

    @property
    def lines(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___XLine]:
        """Parallel timelines grouped in this plane. XLines with the same id
        are effectively the same timeline.
        """
        pass
    @property
    def event_metadata(self) -> google.protobuf.internal.containers.MessageMap[builtins.int, global___XEventMetadata]:
        """XEventMetadata map, each entry uses the XEventMetadata.id as key. This map
        should be used for events that share the same ID over the whole XPlane.
        """
        pass
    @property
    def stat_metadata(self) -> google.protobuf.internal.containers.MessageMap[builtins.int, global___XStatMetadata]:
        """XStatMetadata map, each entry uses the XStatMetadata.id as key. This map
        should be used for stats that share the same ID over the whole XPlane.
        """
        pass
    @property
    def stats(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___XStat]:
        """XStats associated with this plane, e.g. device capabilities.
        Each of these XStats should have a different metadata_id.
        """
        pass
    def __init__(self,
        *,
        id: builtins.int = ...,
        name: typing.Text = ...,
        lines: typing.Optional[typing.Iterable[global___XLine]] = ...,
        event_metadata: typing.Optional[typing.Mapping[builtins.int, global___XEventMetadata]] = ...,
        stat_metadata: typing.Optional[typing.Mapping[builtins.int, global___XStatMetadata]] = ...,
        stats: typing.Optional[typing.Iterable[global___XStat]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["event_metadata",b"event_metadata","id",b"id","lines",b"lines","name",b"name","stat_metadata",b"stat_metadata","stats",b"stats"]) -> None: ...
global___XPlane = XPlane

class XLine(google.protobuf.message.Message):
    """An XLine is a timeline of trace events (XEvents).
    Next ID: 12
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ID_FIELD_NUMBER: builtins.int
    DISPLAY_ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    TIMESTAMP_NS_FIELD_NUMBER: builtins.int
    DURATION_PS_FIELD_NUMBER: builtins.int
    EVENTS_FIELD_NUMBER: builtins.int
    id: builtins.int
    """Id of this line, can be repeated within an XPlane. All XLines with the
    same id are effectively the same timeline.
    """

    display_id: builtins.int
    """Display id of this line. Multiple lines with the same display_id are
    grouped together in the same trace viewer row.
    """

    name: typing.Text
    """Name of this XLine."""

    display_name: typing.Text
    """Name of this XLine to display in trace viewer."""

    timestamp_ns: builtins.int
    """Start time of this line in nanoseconds since the UNIX epoch.
    XEvent.offset_ps is relative to this timestamp.
    """

    duration_ps: builtins.int
    """Profiling duration for this line in picoseconds."""

    @property
    def events(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___XEvent]:
        """XEvents within the same XLine should not overlap in time, but they can be
        nested.
        """
        pass
    def __init__(self,
        *,
        id: builtins.int = ...,
        display_id: builtins.int = ...,
        name: typing.Text = ...,
        display_name: typing.Text = ...,
        timestamp_ns: builtins.int = ...,
        duration_ps: builtins.int = ...,
        events: typing.Optional[typing.Iterable[global___XEvent]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["display_id",b"display_id","display_name",b"display_name","duration_ps",b"duration_ps","events",b"events","id",b"id","name",b"name","timestamp_ns",b"timestamp_ns"]) -> None: ...
global___XLine = XLine

class XEvent(google.protobuf.message.Message):
    """An XEvent is a trace event, optionally annotated with XStats.
    Next ID: 6
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    METADATA_ID_FIELD_NUMBER: builtins.int
    OFFSET_PS_FIELD_NUMBER: builtins.int
    NUM_OCCURRENCES_FIELD_NUMBER: builtins.int
    DURATION_PS_FIELD_NUMBER: builtins.int
    STATS_FIELD_NUMBER: builtins.int
    metadata_id: builtins.int
    """XEventMetadata.id of corresponding metadata."""

    offset_ps: builtins.int
    """Start time of the event in picoseconds, as offset from
    XLine.timestamp_ns().
    """

    num_occurrences: builtins.int
    """Number of occurrences of the event, if aggregated."""

    duration_ps: builtins.int
    """Duration of the event in picoseconds. Can be zero for an instant event."""

    @property
    def stats(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___XStat]:
        """XStats associated with the event.
        Each of these XStats should have a different metadata_id.
        """
        pass
    def __init__(self,
        *,
        metadata_id: builtins.int = ...,
        offset_ps: builtins.int = ...,
        num_occurrences: builtins.int = ...,
        duration_ps: builtins.int = ...,
        stats: typing.Optional[typing.Iterable[global___XStat]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["data",b"data","num_occurrences",b"num_occurrences","offset_ps",b"offset_ps"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["data",b"data","duration_ps",b"duration_ps","metadata_id",b"metadata_id","num_occurrences",b"num_occurrences","offset_ps",b"offset_ps","stats",b"stats"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["data",b"data"]) -> typing.Optional[typing_extensions.Literal["offset_ps","num_occurrences"]]: ...
global___XEvent = XEvent

class XStat(google.protobuf.message.Message):
    """An XStat is a named value associated with an XEvent, e.g., a performance
    counter value, a metric computed by a formula applied over nested XEvents
    and XStats.
    Next ID: 8
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    METADATA_ID_FIELD_NUMBER: builtins.int
    DOUBLE_VALUE_FIELD_NUMBER: builtins.int
    UINT64_VALUE_FIELD_NUMBER: builtins.int
    INT64_VALUE_FIELD_NUMBER: builtins.int
    STR_VALUE_FIELD_NUMBER: builtins.int
    BYTES_VALUE_FIELD_NUMBER: builtins.int
    REF_VALUE_FIELD_NUMBER: builtins.int
    metadata_id: builtins.int
    """XStatMetadata.id of corresponding metadata."""

    double_value: builtins.float
    uint64_value: builtins.int
    int64_value: builtins.int
    str_value: typing.Text
    bytes_value: builtins.bytes
    ref_value: builtins.int
    """A string value that stored in XStatMetadata::name."""

    def __init__(self,
        *,
        metadata_id: builtins.int = ...,
        double_value: builtins.float = ...,
        uint64_value: builtins.int = ...,
        int64_value: builtins.int = ...,
        str_value: typing.Text = ...,
        bytes_value: builtins.bytes = ...,
        ref_value: builtins.int = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["bytes_value",b"bytes_value","double_value",b"double_value","int64_value",b"int64_value","ref_value",b"ref_value","str_value",b"str_value","uint64_value",b"uint64_value","value",b"value"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["bytes_value",b"bytes_value","double_value",b"double_value","int64_value",b"int64_value","metadata_id",b"metadata_id","ref_value",b"ref_value","str_value",b"str_value","uint64_value",b"uint64_value","value",b"value"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["value",b"value"]) -> typing.Optional[typing_extensions.Literal["double_value","uint64_value","int64_value","str_value","bytes_value","ref_value"]]: ...
global___XStat = XStat

class XEventMetadata(google.protobuf.message.Message):
    """Metadata for an XEvent, corresponds to an event type and is shared by
    all XEvents with the same metadata_id.
    Next ID: 7
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    DISPLAY_NAME_FIELD_NUMBER: builtins.int
    METADATA_FIELD_NUMBER: builtins.int
    STATS_FIELD_NUMBER: builtins.int
    CHILD_ID_FIELD_NUMBER: builtins.int
    id: builtins.int
    """XPlane.event_metadata map key."""

    name: typing.Text
    """Name of the event."""

    display_name: typing.Text
    """Name of the event shown in trace viewer."""

    metadata: builtins.bytes
    """Additional metadata in serialized format."""

    @property
    def stats(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___XStat]:
        """XStats that are constant for all XEvents with the same metadata_id.
        Each of these XStats should have a different metadata_id.
        """
        pass
    @property
    def child_id(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
        """XPlane.event_metadata map key for children events."""
        pass
    def __init__(self,
        *,
        id: builtins.int = ...,
        name: typing.Text = ...,
        display_name: typing.Text = ...,
        metadata: builtins.bytes = ...,
        stats: typing.Optional[typing.Iterable[global___XStat]] = ...,
        child_id: typing.Optional[typing.Iterable[builtins.int]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["child_id",b"child_id","display_name",b"display_name","id",b"id","metadata",b"metadata","name",b"name","stats",b"stats"]) -> None: ...
global___XEventMetadata = XEventMetadata

class XStatMetadata(google.protobuf.message.Message):
    """Metadata for an XStat, corresponds to a stat type and is shared by all
    XStats with the same metadata_id.
    Next ID: 4
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    DESCRIPTION_FIELD_NUMBER: builtins.int
    id: builtins.int
    """XPlane.stat_metadata map key."""

    name: typing.Text
    """Name of the stat (should be short).
    Two XStatMetadata with different id should have different names.
    """

    description: typing.Text
    """Description of the stat (might be long)."""

    def __init__(self,
        *,
        id: builtins.int = ...,
        name: typing.Text = ...,
        description: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["description",b"description","id",b"id","name",b"name"]) -> None: ...
global___XStatMetadata = XStatMetadata
