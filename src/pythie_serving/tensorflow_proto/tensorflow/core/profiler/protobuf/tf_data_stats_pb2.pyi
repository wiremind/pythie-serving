"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.internal.enum_type_wrapper
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class IteratorStat(google.protobuf.message.Message):
    """Stat for iterator."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    ID_FIELD_NUMBER: builtins.int
    START_TIME_PS_FIELD_NUMBER: builtins.int
    DURATION_PS_FIELD_NUMBER: builtins.int
    SELF_TIME_PS_FIELD_NUMBER: builtins.int
    IS_BLOCKING_FIELD_NUMBER: builtins.int
    NUM_CALLS_FIELD_NUMBER: builtins.int
    id: builtins.int
    """Id of the iterator."""

    start_time_ps: builtins.int
    """Start time of the iterator's GetNext in ps."""

    duration_ps: builtins.int
    """Duration of the iterator's GetNext in ps."""

    self_time_ps: builtins.int
    """Self time of the iterator's GetNext in ps. It takes account into async
    iterators. It is calculated by subtracting the time overlapped with its
    child iterator's duration from the iterator's duration.
    """

    is_blocking: builtins.bool
    """Whether it is blocking the root iterator. An async iterator's child
    iterator may not block its parent iterator if it is executed in advance and
    does not overlap with the parent iterator.
    """

    num_calls: builtins.int
    """The number of times this iterator is called. For example, a batch
    iterator's child iterator may be called multiple times.
    """

    def __init__(self,
        *,
        id: builtins.int = ...,
        start_time_ps: builtins.int = ...,
        duration_ps: builtins.int = ...,
        self_time_ps: builtins.int = ...,
        is_blocking: builtins.bool = ...,
        num_calls: builtins.int = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["duration_ps",b"duration_ps","id",b"id","is_blocking",b"is_blocking","num_calls",b"num_calls","self_time_ps",b"self_time_ps","start_time_ps",b"start_time_ps"]) -> None: ...
global___IteratorStat = IteratorStat

class IteratorMetadata(google.protobuf.message.Message):
    """Metadata for iterator."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class ParamsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        value: typing.Text
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Text = ...,
            ) -> None: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ID_FIELD_NUMBER: builtins.int
    PARENT_ID_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    LONG_NAME_FIELD_NUMBER: builtins.int
    IS_ASYNC_FIELD_NUMBER: builtins.int
    PARAMS_FIELD_NUMBER: builtins.int
    id: builtins.int
    """Id of the iterator."""

    parent_id: builtins.int
    """Id of the parent iterator."""

    name: typing.Text
    """Name of the iterator."""

    long_name: typing.Text
    """Long name of the iterator."""

    is_async: builtins.bool
    """Whether it is an async iterator."""

    @property
    def params(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, typing.Text]:
        """Parameters of the iterator (e.g., num_parallel_calls)."""
        pass
    def __init__(self,
        *,
        id: builtins.int = ...,
        parent_id: builtins.int = ...,
        name: typing.Text = ...,
        long_name: typing.Text = ...,
        is_async: builtins.bool = ...,
        params: typing.Optional[typing.Mapping[typing.Text, typing.Text]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["id",b"id","is_async",b"is_async","long_name",b"long_name","name",b"name","params",b"params","parent_id",b"parent_id"]) -> None: ...
global___IteratorMetadata = IteratorMetadata

class InputPipelineStat(google.protobuf.message.Message):
    """Stat and metadata for input pipeline."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class IteratorStatsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        @property
        def value(self) -> global___IteratorStat: ...
        def __init__(self,
            *,
            key: builtins.int = ...,
            value: typing.Optional[global___IteratorStat] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    BOTTLENECK_ITERATOR_ID_FIELD_NUMBER: builtins.int
    BOTTLENECK_ITERATOR_LATENCY_PS_FIELD_NUMBER: builtins.int
    ITERATOR_STATS_FIELD_NUMBER: builtins.int
    bottleneck_iterator_id: builtins.int
    """Id of the blocking iterator with the longest self time."""

    bottleneck_iterator_latency_ps: builtins.int
    """Latency of the bottleneck iterator."""

    @property
    def iterator_stats(self) -> google.protobuf.internal.containers.MessageMap[builtins.int, global___IteratorStat]:
        """Stats per iterator."""
        pass
    def __init__(self,
        *,
        bottleneck_iterator_id: builtins.int = ...,
        bottleneck_iterator_latency_ps: builtins.int = ...,
        iterator_stats: typing.Optional[typing.Mapping[builtins.int, global___IteratorStat]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["bottleneck_iterator_id",b"bottleneck_iterator_id","bottleneck_iterator_latency_ps",b"bottleneck_iterator_latency_ps","iterator_stats",b"iterator_stats"]) -> None: ...
global___InputPipelineStat = InputPipelineStat

class InputPipelineMetadata(google.protobuf.message.Message):
    """Metadata for input pipeline."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class _InputPipelineType:
        ValueType = typing.NewType('ValueType', builtins.int)
        V: typing_extensions.TypeAlias = ValueType
    class _InputPipelineTypeEnumTypeWrapper(google.protobuf.internal.enum_type_wrapper._EnumTypeWrapper[InputPipelineMetadata._InputPipelineType.ValueType], builtins.type):
        DESCRIPTOR: google.protobuf.descriptor.EnumDescriptor
        HOST: InputPipelineMetadata._InputPipelineType.ValueType  # 0
        DEVICE: InputPipelineMetadata._InputPipelineType.ValueType  # 1
    class InputPipelineType(_InputPipelineType, metaclass=_InputPipelineTypeEnumTypeWrapper):
        """The distribution strategy creates one "host" input pipeline which actually
        runs tf.data user code. Also, it creates a "device" input pipeline per
        device (e.g., TensorCore) which takes an element from the host input
        pipeline and transfers it to the device.
        """
        pass

    HOST: InputPipelineMetadata.InputPipelineType.ValueType  # 0
    DEVICE: InputPipelineMetadata.InputPipelineType.ValueType  # 1

    ID_FIELD_NUMBER: builtins.int
    TYPE_FIELD_NUMBER: builtins.int
    NAME_FIELD_NUMBER: builtins.int
    id: builtins.int
    """Id of the input pipeline which is set to the id of its root iterator."""

    type: global___InputPipelineMetadata.InputPipelineType.ValueType
    name: typing.Text
    def __init__(self,
        *,
        id: builtins.int = ...,
        type: global___InputPipelineMetadata.InputPipelineType.ValueType = ...,
        name: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["id",b"id","name",b"name","type",b"type"]) -> None: ...
global___InputPipelineMetadata = InputPipelineMetadata

class InputPipelineStats(google.protobuf.message.Message):
    """Collection of metadata and stats of input pipeline."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    METADATA_FIELD_NUMBER: builtins.int
    AVG_LATENCY_PS_FIELD_NUMBER: builtins.int
    MIN_LATENCY_PS_FIELD_NUMBER: builtins.int
    MAX_LATENCY_PS_FIELD_NUMBER: builtins.int
    NUM_SLOW_CALLS_FIELD_NUMBER: builtins.int
    STATS_FIELD_NUMBER: builtins.int
    @property
    def metadata(self) -> global___InputPipelineMetadata:
        """Metadata of the input pipeline."""
        pass
    avg_latency_ps: builtins.int
    """Average latency (i.e., the root iterator's latency) of the input pipeline."""

    min_latency_ps: builtins.int
    """Minimum latency of the input pipeline."""

    max_latency_ps: builtins.int
    """Maximum latency of the input pipeline."""

    num_slow_calls: builtins.int
    """The number of times this input pipeline was slower than 50 us."""

    @property
    def stats(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___InputPipelineStat]:
        """Stats per call sorted by the root iterator's duration."""
        pass
    def __init__(self,
        *,
        metadata: typing.Optional[global___InputPipelineMetadata] = ...,
        avg_latency_ps: builtins.int = ...,
        min_latency_ps: builtins.int = ...,
        max_latency_ps: builtins.int = ...,
        num_slow_calls: builtins.int = ...,
        stats: typing.Optional[typing.Iterable[global___InputPipelineStat]] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["metadata",b"metadata"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["avg_latency_ps",b"avg_latency_ps","max_latency_ps",b"max_latency_ps","metadata",b"metadata","min_latency_ps",b"min_latency_ps","num_slow_calls",b"num_slow_calls","stats",b"stats"]) -> None: ...
global___InputPipelineStats = InputPipelineStats

class TfDataStats(google.protobuf.message.Message):
    """Collection of stats of tf.data input pipelines within a host."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class IteratorMetadataEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        @property
        def value(self) -> global___IteratorMetadata: ...
        def __init__(self,
            *,
            key: builtins.int = ...,
            value: typing.Optional[global___IteratorMetadata] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class InputPipelinesEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: builtins.int
        @property
        def value(self) -> global___InputPipelineStats: ...
        def __init__(self,
            *,
            key: builtins.int = ...,
            value: typing.Optional[global___InputPipelineStats] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    ITERATOR_METADATA_FIELD_NUMBER: builtins.int
    INPUT_PIPELINES_FIELD_NUMBER: builtins.int
    @property
    def iterator_metadata(self) -> google.protobuf.internal.containers.MessageMap[builtins.int, global___IteratorMetadata]:
        """Metadata per iterator."""
        pass
    @property
    def input_pipelines(self) -> google.protobuf.internal.containers.MessageMap[builtins.int, global___InputPipelineStats]:
        """Stats per input pipeline."""
        pass
    def __init__(self,
        *,
        iterator_metadata: typing.Optional[typing.Mapping[builtins.int, global___IteratorMetadata]] = ...,
        input_pipelines: typing.Optional[typing.Mapping[builtins.int, global___InputPipelineStats]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["input_pipelines",b"input_pipelines","iterator_metadata",b"iterator_metadata"]) -> None: ...
global___TfDataStats = TfDataStats

class TfDataBottleneckAnalysis(google.protobuf.message.Message):
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    HOST_FIELD_NUMBER: builtins.int
    INPUT_PIPELINE_FIELD_NUMBER: builtins.int
    MAX_LATENCY_PS_FIELD_NUMBER: builtins.int
    ITERATOR_NAME_FIELD_NUMBER: builtins.int
    ITERATOR_LONG_NAME_FIELD_NUMBER: builtins.int
    ITERATOR_LATENCY_PS_FIELD_NUMBER: builtins.int
    SUGGESTION_FIELD_NUMBER: builtins.int
    host: typing.Text
    """Host name."""

    input_pipeline: typing.Text
    """Input pipeline name."""

    max_latency_ps: builtins.int
    """Maximum latency of the input pipeline."""

    iterator_name: typing.Text
    """Name of the bottleneck iterator."""

    iterator_long_name: typing.Text
    """Long name of the bottleneck iterator."""

    iterator_latency_ps: builtins.int
    """Latency of the bottleneck iterator."""

    suggestion: typing.Text
    """Suggestion to resolve the bottleneck."""

    def __init__(self,
        *,
        host: typing.Text = ...,
        input_pipeline: typing.Text = ...,
        max_latency_ps: builtins.int = ...,
        iterator_name: typing.Text = ...,
        iterator_long_name: typing.Text = ...,
        iterator_latency_ps: builtins.int = ...,
        suggestion: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["host",b"host","input_pipeline",b"input_pipeline","iterator_latency_ps",b"iterator_latency_ps","iterator_long_name",b"iterator_long_name","iterator_name",b"iterator_name","max_latency_ps",b"max_latency_ps","suggestion",b"suggestion"]) -> None: ...
global___TfDataBottleneckAnalysis = TfDataBottleneckAnalysis

class CombinedTfDataStats(google.protobuf.message.Message):
    """TfDataStats of all hosts."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class TfDataStatsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        @property
        def value(self) -> global___TfDataStats: ...
        def __init__(self,
            *,
            key: typing.Text = ...,
            value: typing.Optional[global___TfDataStats] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    IS_INPUT_BOUND_FIELD_NUMBER: builtins.int
    SUMMARY_FIELD_NUMBER: builtins.int
    BOTTLENECK_ANALYSIS_FIELD_NUMBER: builtins.int
    TF_DATA_STATS_FIELD_NUMBER: builtins.int
    is_input_bound: builtins.bool
    """Whether it is input bound."""

    summary: typing.Text
    """Summary of the analysis."""

    @property
    def bottleneck_analysis(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TfDataBottleneckAnalysis]:
        """Bottleneck analysis result."""
        pass
    @property
    def tf_data_stats(self) -> google.protobuf.internal.containers.MessageMap[typing.Text, global___TfDataStats]:
        """TfDataStats per host."""
        pass
    def __init__(self,
        *,
        is_input_bound: builtins.bool = ...,
        summary: typing.Text = ...,
        bottleneck_analysis: typing.Optional[typing.Iterable[global___TfDataBottleneckAnalysis]] = ...,
        tf_data_stats: typing.Optional[typing.Mapping[typing.Text, global___TfDataStats]] = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["bottleneck_analysis",b"bottleneck_analysis","is_input_bound",b"is_input_bound","summary",b"summary","tf_data_stats",b"tf_data_stats"]) -> None: ...
global___CombinedTfDataStats = CombinedTfDataStats
