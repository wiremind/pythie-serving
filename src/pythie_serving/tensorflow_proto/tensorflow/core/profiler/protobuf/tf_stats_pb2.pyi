"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class TfStatsDatabase(google.protobuf.message.Message):
    """A database of TfStatsTables."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    WITH_IDLE_FIELD_NUMBER: builtins.int
    WITHOUT_IDLE_FIELD_NUMBER: builtins.int
    DEVICE_TYPE_FIELD_NUMBER: builtins.int
    @property
    def with_idle(self) -> global___TfStatsTable:
        """The table that includes IDLE time."""
        pass
    @property
    def without_idle(self) -> global___TfStatsTable:
        """The table that excludes IDLE time."""
        pass
    device_type: typing.Text
    """The type of device used."""

    def __init__(self,
        *,
        with_idle: typing.Optional[global___TfStatsTable] = ...,
        without_idle: typing.Optional[global___TfStatsTable] = ...,
        device_type: typing.Text = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["with_idle",b"with_idle","without_idle",b"without_idle"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["device_type",b"device_type","with_idle",b"with_idle","without_idle",b"without_idle"]) -> None: ...
global___TfStatsDatabase = TfStatsDatabase

class TfStatsTable(google.protobuf.message.Message):
    """A table of TFStatsRecords plus the corresponding pprof keys."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    TF_STATS_RECORD_FIELD_NUMBER: builtins.int
    HOST_TF_PPROF_KEY_FIELD_NUMBER: builtins.int
    DEVICE_TF_PPROF_KEY_FIELD_NUMBER: builtins.int
    @property
    def tf_stats_record(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___TfStatsRecord]:
        """All TfStats records, one for each TF operation."""
        pass
    host_tf_pprof_key: typing.Text
    """key to the pprof profile for host TF operations."""

    device_tf_pprof_key: typing.Text
    """key to the pprof profile for device TF operations."""

    def __init__(self,
        *,
        tf_stats_record: typing.Optional[typing.Iterable[global___TfStatsRecord]] = ...,
        host_tf_pprof_key: typing.Text = ...,
        device_tf_pprof_key: typing.Text = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["device_tf_pprof_key",b"device_tf_pprof_key","host_tf_pprof_key",b"host_tf_pprof_key","tf_stats_record",b"tf_stats_record"]) -> None: ...
global___TfStatsTable = TfStatsTable

class TfStatsRecord(google.protobuf.message.Message):
    """There is one TfStatsRecord for each TF operation profiled."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    RANK_FIELD_NUMBER: builtins.int
    HOST_OR_DEVICE_FIELD_NUMBER: builtins.int
    OP_TYPE_FIELD_NUMBER: builtins.int
    OP_NAME_FIELD_NUMBER: builtins.int
    OCCURRENCES_FIELD_NUMBER: builtins.int
    TOTAL_TIME_IN_US_FIELD_NUMBER: builtins.int
    AVG_TIME_IN_US_FIELD_NUMBER: builtins.int
    TOTAL_SELF_TIME_IN_US_FIELD_NUMBER: builtins.int
    AVG_SELF_TIME_IN_US_FIELD_NUMBER: builtins.int
    DEVICE_TOTAL_SELF_TIME_AS_FRACTION_FIELD_NUMBER: builtins.int
    DEVICE_CUMULATIVE_TOTAL_SELF_TIME_AS_FRACTION_FIELD_NUMBER: builtins.int
    HOST_TOTAL_SELF_TIME_AS_FRACTION_FIELD_NUMBER: builtins.int
    HOST_CUMULATIVE_TOTAL_SELF_TIME_AS_FRACTION_FIELD_NUMBER: builtins.int
    MEASURED_FLOP_RATE_FIELD_NUMBER: builtins.int
    MEASURED_MEMORY_BW_FIELD_NUMBER: builtins.int
    OPERATIONAL_INTENSITY_FIELD_NUMBER: builtins.int
    BOUND_BY_FIELD_NUMBER: builtins.int
    IS_EAGER_FIELD_NUMBER: builtins.int
    GPU_TENSORCORE_UTILIZATION_FIELD_NUMBER: builtins.int
    rank: builtins.int
    """Rank of this TF-op among all TF-ops."""

    host_or_device: typing.Text
    """Whether this TF-op is on "Host" or "Device"."""

    op_type: typing.Text
    """TF-op type."""

    op_name: typing.Text
    """TF-op name."""

    occurrences: builtins.int
    """Number of occurrences of the operation."""

    total_time_in_us: builtins.float
    """Total "accumulated" time in micro-seconds that the operation
    took. If this operation has any children operations,
    the "accumulated" time includes the time spent inside children.
    """

    avg_time_in_us: builtins.float
    """Average "accumulated" time in micro-seconds that each
    occurrence of the operation took.
    """

    total_self_time_in_us: builtins.float
    """Total "self" time in micro-seconds that the operation took.
    If this operation has any children operations, the "self" time
    doesn't include the time spent inside children.
    """

    avg_self_time_in_us: builtins.float
    """Average "self" time in micro-seconds that the operation took."""

    device_total_self_time_as_fraction: builtins.float
    """Total "self" time as fraction of the sum of the total self-time
    of operations run on the device. It is 0 if this op runs on the host.
    """

    device_cumulative_total_self_time_as_fraction: builtins.float
    """Cumulative value of device_total_self_time_as_fraction."""

    host_total_self_time_as_fraction: builtins.float
    """Total "self" time as fraction of the sum of the total self-time
    of operations run on the host. It is 0 if this op runs on the device.
    """

    host_cumulative_total_self_time_as_fraction: builtins.float
    """Cumulative value of host_total_self_time_as_fraction."""

    measured_flop_rate: builtins.float
    """Number of floating-point operations (FLOPs) performed per
    second.
    """

    measured_memory_bw: builtins.float
    """Number of bytes (including both read and write) accessed per
    second.
    """

    operational_intensity: builtins.float
    """Operational intensity, which is defined as FLOPs/bytes-accessed."""

    bound_by: typing.Text
    """Whether this operation is "Compute" or "Memory" bound,
    according to the Roofline Model.
    """

    is_eager: builtins.bool
    """Whether this TF-op is eagerly executed."""

    gpu_tensorcore_utilization: builtins.float
    """Fraction of kernel time that utilizes GPU TensorCore.
    It is 0.0 if this op does not run on a GPU device.
    """

    def __init__(self,
        *,
        rank: builtins.int = ...,
        host_or_device: typing.Text = ...,
        op_type: typing.Text = ...,
        op_name: typing.Text = ...,
        occurrences: builtins.int = ...,
        total_time_in_us: builtins.float = ...,
        avg_time_in_us: builtins.float = ...,
        total_self_time_in_us: builtins.float = ...,
        avg_self_time_in_us: builtins.float = ...,
        device_total_self_time_as_fraction: builtins.float = ...,
        device_cumulative_total_self_time_as_fraction: builtins.float = ...,
        host_total_self_time_as_fraction: builtins.float = ...,
        host_cumulative_total_self_time_as_fraction: builtins.float = ...,
        measured_flop_rate: builtins.float = ...,
        measured_memory_bw: builtins.float = ...,
        operational_intensity: builtins.float = ...,
        bound_by: typing.Text = ...,
        is_eager: builtins.bool = ...,
        gpu_tensorcore_utilization: builtins.float = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["avg_self_time_in_us",b"avg_self_time_in_us","avg_time_in_us",b"avg_time_in_us","bound_by",b"bound_by","device_cumulative_total_self_time_as_fraction",b"device_cumulative_total_self_time_as_fraction","device_total_self_time_as_fraction",b"device_total_self_time_as_fraction","gpu_tensorcore_utilization",b"gpu_tensorcore_utilization","host_cumulative_total_self_time_as_fraction",b"host_cumulative_total_self_time_as_fraction","host_or_device",b"host_or_device","host_total_self_time_as_fraction",b"host_total_self_time_as_fraction","is_eager",b"is_eager","measured_flop_rate",b"measured_flop_rate","measured_memory_bw",b"measured_memory_bw","occurrences",b"occurrences","op_name",b"op_name","op_type",b"op_type","operational_intensity",b"operational_intensity","rank",b"rank","total_self_time_in_us",b"total_self_time_in_us","total_time_in_us",b"total_time_in_us"]) -> None: ...
global___TfStatsRecord = TfStatsRecord
