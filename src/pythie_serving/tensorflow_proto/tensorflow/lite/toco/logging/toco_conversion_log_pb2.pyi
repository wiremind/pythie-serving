"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class TocoConversionLog(google.protobuf.message.Message):
    """TocoConversionLog contains the analytics to be gathered when user converts
    a model to TF Lite using TOCO.
    Next ID to USE: 14.
    """
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class BuiltInOpsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        value: builtins.int
        def __init__(self,
            *,
            key: typing.Optional[typing.Text] = ...,
            value: typing.Optional[builtins.int] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class CustomOpsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        value: builtins.int
        def __init__(self,
            *,
            key: typing.Optional[typing.Text] = ...,
            value: typing.Optional[builtins.int] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    class SelectOpsEntry(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        KEY_FIELD_NUMBER: builtins.int
        VALUE_FIELD_NUMBER: builtins.int
        key: typing.Text
        value: builtins.int
        def __init__(self,
            *,
            key: typing.Optional[typing.Text] = ...,
            value: typing.Optional[builtins.int] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["key",b"key","value",b"value"]) -> None: ...

    OP_LIST_FIELD_NUMBER: builtins.int
    BUILT_IN_OPS_FIELD_NUMBER: builtins.int
    CUSTOM_OPS_FIELD_NUMBER: builtins.int
    SELECT_OPS_FIELD_NUMBER: builtins.int
    OP_SIGNATURES_FIELD_NUMBER: builtins.int
    INPUT_TENSOR_TYPES_FIELD_NUMBER: builtins.int
    OUTPUT_TENSOR_TYPES_FIELD_NUMBER: builtins.int
    LOG_GENERATION_TS_FIELD_NUMBER: builtins.int
    MODEL_SIZE_FIELD_NUMBER: builtins.int
    TF_LITE_VERSION_FIELD_NUMBER: builtins.int
    OS_VERSION_FIELD_NUMBER: builtins.int
    MODEL_HASH_FIELD_NUMBER: builtins.int
    TOCO_ERR_LOGS_FIELD_NUMBER: builtins.int
    @property
    def op_list(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Total ops listed by name."""
        pass
    @property
    def built_in_ops(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, builtins.int]:
        """Counts of built-in ops.
        Key is op name and value is the count.
        """
        pass
    @property
    def custom_ops(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, builtins.int]:
        """Counts of custom ops."""
        pass
    @property
    def select_ops(self) -> google.protobuf.internal.containers.ScalarMap[typing.Text, builtins.int]:
        """Counts of select ops."""
        pass
    @property
    def op_signatures(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """The signature of operators. Including ops input/output types and shapes,
        op name and version.
        """
        pass
    @property
    def input_tensor_types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Input tensor types."""
        pass
    @property
    def output_tensor_types(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[typing.Text]:
        """Output tensor types."""
        pass
    log_generation_ts: builtins.int
    """Log generation time in micro-seconds."""

    model_size: builtins.int
    """Total number of ops in the model."""

    tf_lite_version: typing.Text
    """Tensorflow Lite runtime version."""

    os_version: typing.Text
    """Operating System info."""

    model_hash: typing.Text
    """Model hash string."""

    toco_err_logs: typing.Text
    """Error messages emitted by TOCO during conversion."""

    def __init__(self,
        *,
        op_list: typing.Optional[typing.Iterable[typing.Text]] = ...,
        built_in_ops: typing.Optional[typing.Mapping[typing.Text, builtins.int]] = ...,
        custom_ops: typing.Optional[typing.Mapping[typing.Text, builtins.int]] = ...,
        select_ops: typing.Optional[typing.Mapping[typing.Text, builtins.int]] = ...,
        op_signatures: typing.Optional[typing.Iterable[typing.Text]] = ...,
        input_tensor_types: typing.Optional[typing.Iterable[typing.Text]] = ...,
        output_tensor_types: typing.Optional[typing.Iterable[typing.Text]] = ...,
        log_generation_ts: typing.Optional[builtins.int] = ...,
        model_size: typing.Optional[builtins.int] = ...,
        tf_lite_version: typing.Optional[typing.Text] = ...,
        os_version: typing.Optional[typing.Text] = ...,
        model_hash: typing.Optional[typing.Text] = ...,
        toco_err_logs: typing.Optional[typing.Text] = ...,
        ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["log_generation_ts",b"log_generation_ts","model_hash",b"model_hash","model_size",b"model_size","os_version",b"os_version","tf_lite_version",b"tf_lite_version","toco_err_logs",b"toco_err_logs"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["built_in_ops",b"built_in_ops","custom_ops",b"custom_ops","input_tensor_types",b"input_tensor_types","log_generation_ts",b"log_generation_ts","model_hash",b"model_hash","model_size",b"model_size","op_list",b"op_list","op_signatures",b"op_signatures","os_version",b"os_version","output_tensor_types",b"output_tensor_types","select_ops",b"select_ops","tf_lite_version",b"tf_lite_version","toco_err_logs",b"toco_err_logs"]) -> None: ...
global___TocoConversionLog = TocoConversionLog
