"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2019 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class ImagePreprocessingStepParams(google.protobuf.message.Message):
    """Defines the preprocesing steps available.

    Next ID: 5
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CROPPING_PARAMS_FIELD_NUMBER: builtins.int
    RESIZING_PARAMS_FIELD_NUMBER: builtins.int
    PADDING_PARAMS_FIELD_NUMBER: builtins.int
    NORMALIZATION_PARAMS_FIELD_NUMBER: builtins.int
    @property
    def cropping_params(self) -> global___CroppingParams: ...
    @property
    def resizing_params(self) -> global___ResizingParams: ...
    @property
    def padding_params(self) -> global___PaddingParams: ...
    @property
    def normalization_params(self) -> global___NormalizationParams: ...
    def __init__(
        self,
        *,
        cropping_params: global___CroppingParams | None = ...,
        resizing_params: global___ResizingParams | None = ...,
        padding_params: global___PaddingParams | None = ...,
        normalization_params: global___NormalizationParams | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cropping_params", b"cropping_params", "normalization_params", b"normalization_params", "padding_params", b"padding_params", "params", b"params", "resizing_params", b"resizing_params"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cropping_params", b"cropping_params", "normalization_params", b"normalization_params", "padding_params", b"padding_params", "params", b"params", "resizing_params", b"resizing_params"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["params", b"params"]) -> typing_extensions.Literal["cropping_params", "resizing_params", "padding_params", "normalization_params"] | None: ...

global___ImagePreprocessingStepParams = ImagePreprocessingStepParams

@typing_extensions.final
class ImageSize(google.protobuf.message.Message):
    """Defines the size of an image.

    Next ID: 3
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    WIDTH_FIELD_NUMBER: builtins.int
    HEIGHT_FIELD_NUMBER: builtins.int
    width: builtins.int
    """Width of the image."""
    height: builtins.int
    """Height of the image."""
    def __init__(
        self,
        *,
        width: builtins.int | None = ...,
        height: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["height", b"height", "width", b"width"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["height", b"height", "width", b"width"]) -> None: ...

global___ImageSize = ImageSize

@typing_extensions.final
class CroppingParams(google.protobuf.message.Message):
    """Defines parameters for central-cropping.

    Next ID: 4
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    CROPPING_FRACTION_FIELD_NUMBER: builtins.int
    TARGET_SIZE_FIELD_NUMBER: builtins.int
    SQUARE_CROPPING_FIELD_NUMBER: builtins.int
    cropping_fraction: builtins.float
    """Fraction for central-cropping.
    A central cropping-fraction of 0.875 is considered best for Inception
    models, hence the default value. See:
    https://github.com/tensorflow/tpu/blob/master/models/experimental/inception/inception_preprocessing.py#L296
    Set to 0 to disable cropping.
    """
    @property
    def target_size(self) -> global___ImageSize:
        """The target size after cropping."""
    square_cropping: builtins.bool
    """Crops to a square image."""
    def __init__(
        self,
        *,
        cropping_fraction: builtins.float | None = ...,
        target_size: global___ImageSize | None = ...,
        square_cropping: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["cropping_fraction", b"cropping_fraction", "params", b"params", "square_cropping", b"square_cropping", "target_size", b"target_size"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["cropping_fraction", b"cropping_fraction", "params", b"params", "square_cropping", b"square_cropping", "target_size", b"target_size"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["params", b"params"]) -> typing_extensions.Literal["cropping_fraction", "target_size"] | None: ...

global___CroppingParams = CroppingParams

@typing_extensions.final
class ResizingParams(google.protobuf.message.Message):
    """Defines parameters for bilinear central-resizing.

    Next ID: 3
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TARGET_SIZE_FIELD_NUMBER: builtins.int
    ASPECT_PRESERVING_FIELD_NUMBER: builtins.int
    @property
    def target_size(self) -> global___ImageSize:
        """Size of the image after resizing."""
    aspect_preserving: builtins.bool
    """If this flag is true, the resize function will preserve the image's aspect
    ratio. Note that in this case, the size of output image may not equal to
    the target size defined above.
    """
    def __init__(
        self,
        *,
        target_size: global___ImageSize | None = ...,
        aspect_preserving: builtins.bool | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["aspect_preserving", b"aspect_preserving", "target_size", b"target_size"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["aspect_preserving", b"aspect_preserving", "target_size", b"target_size"]) -> None: ...

global___ResizingParams = ResizingParams

@typing_extensions.final
class PaddingParams(google.protobuf.message.Message):
    """Defines parameters for central-padding.

    Next ID: 4
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    TARGET_SIZE_FIELD_NUMBER: builtins.int
    SQUARE_PADDING_FIELD_NUMBER: builtins.int
    PADDING_VALUE_FIELD_NUMBER: builtins.int
    @property
    def target_size(self) -> global___ImageSize:
        """Size of the image after padding."""
    square_padding: builtins.bool
    """Pads to a square image."""
    padding_value: builtins.int
    """Padding value."""
    def __init__(
        self,
        *,
        target_size: global___ImageSize | None = ...,
        square_padding: builtins.bool | None = ...,
        padding_value: builtins.int | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["padding_value", b"padding_value", "params", b"params", "square_padding", b"square_padding", "target_size", b"target_size"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["padding_value", b"padding_value", "params", b"params", "square_padding", b"square_padding", "target_size", b"target_size"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["params", b"params"]) -> typing_extensions.Literal["target_size", "square_padding"] | None: ...

global___PaddingParams = PaddingParams

@typing_extensions.final
class NormalizationParams(google.protobuf.message.Message):
    """Defines parameters for normalization.
    The normalization formula is: output = (input - mean) * scale.

    Next ID: 4
    """

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    @typing_extensions.final
    class PerChannelMeanValues(google.protobuf.message.Message):
        DESCRIPTOR: google.protobuf.descriptor.Descriptor

        R_MEAN_FIELD_NUMBER: builtins.int
        G_MEAN_FIELD_NUMBER: builtins.int
        B_MEAN_FIELD_NUMBER: builtins.int
        r_mean: builtins.float
        """The mean values of r channel."""
        g_mean: builtins.float
        """The mean values of g channel."""
        b_mean: builtins.float
        """The mean values of b channel."""
        def __init__(
            self,
            *,
            r_mean: builtins.float | None = ...,
            g_mean: builtins.float | None = ...,
            b_mean: builtins.float | None = ...,
        ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["b_mean", b"b_mean", "g_mean", b"g_mean", "r_mean", b"r_mean"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["b_mean", b"b_mean", "g_mean", b"g_mean", "r_mean", b"r_mean"]) -> None: ...

    CHANNELWISE_MEAN_FIELD_NUMBER: builtins.int
    MEANS_FIELD_NUMBER: builtins.int
    SCALE_FIELD_NUMBER: builtins.int
    channelwise_mean: builtins.float
    """Channelwise mean value."""
    @property
    def means(self) -> global___NormalizationParams.PerChannelMeanValues:
        """Per-Channel mean values."""
    scale: builtins.float
    """Scale value in the normalization."""
    def __init__(
        self,
        *,
        channelwise_mean: builtins.float | None = ...,
        means: global___NormalizationParams.PerChannelMeanValues | None = ...,
        scale: builtins.float | None = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["channelwise_mean", b"channelwise_mean", "mean", b"mean", "means", b"means", "scale", b"scale"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["channelwise_mean", b"channelwise_mean", "mean", b"mean", "means", b"means", "scale", b"scale"]) -> None: ...
    def WhichOneof(self, oneof_group: typing_extensions.Literal["mean", b"mean"]) -> typing_extensions.Literal["channelwise_mean", "means"] | None: ...

global___NormalizationParams = NormalizationParams
