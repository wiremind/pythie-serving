"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
Copyright 2022 The TensorFlow Authors. All Rights Reserved.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
==============================================================================
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.message
import sys
import tensorflow.compiler.xla.service.hlo_pb2

if sys.version_info >= (3, 8):
    import typing as typing_extensions
else:
    import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

@typing_extensions.final
class XlaSerializedCacheKey(google.protobuf.message.Message):
    """Represents the cache key used for persistence."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    SIGNATURE_FINGERPRINT_FIELD_NUMBER: builtins.int
    CLUSTER_FINGERPRINT_FIELD_NUMBER: builtins.int
    DEVICE_TYPE_FIELD_NUMBER: builtins.int
    PREFIX_FIELD_NUMBER: builtins.int
    signature_fingerprint: builtins.int
    cluster_fingerprint: builtins.int
    device_type: builtins.str
    prefix: builtins.str
    def __init__(
        self,
        *,
        signature_fingerprint: builtins.int = ...,
        cluster_fingerprint: builtins.int = ...,
        device_type: builtins.str = ...,
        prefix: builtins.str = ...,
    ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["cluster_fingerprint", b"cluster_fingerprint", "device_type", b"device_type", "prefix", b"prefix", "signature_fingerprint", b"signature_fingerprint"]) -> None: ...

global___XlaSerializedCacheKey = XlaSerializedCacheKey

@typing_extensions.final
class XlaSerializedCacheEntry(google.protobuf.message.Message):
    """Represents an entry in the XLA compile cache."""

    DESCRIPTOR: google.protobuf.descriptor.Descriptor

    KEY_FIELD_NUMBER: builtins.int
    HLO_MODULE_FIELD_NUMBER: builtins.int
    EXECUTABLE_FIELD_NUMBER: builtins.int
    @property
    def key(self) -> global___XlaSerializedCacheKey:
        """Used to uniqely identify this entry in its persisted representation."""
    @property
    def hlo_module(self) -> tensorflow.compiler.xla.service.hlo_pb2.HloModuleProto:
        """The computation (HLO) that compilation was done for. It is correlated to
        the input TF graph so we can use it to fingerprint the compiled binary. We
        serialize this rather than the input graphdef because it provides a
        stronger guarantee over what bindings are needed between the HLO and
        calling TF graph.
        """
    executable: builtins.bytes
    """The raw bytes of the executable."""
    def __init__(
        self,
        *,
        key: global___XlaSerializedCacheKey | None = ...,
        hlo_module: tensorflow.compiler.xla.service.hlo_pb2.HloModuleProto | None = ...,
        executable: builtins.bytes = ...,
    ) -> None: ...
    def HasField(self, field_name: typing_extensions.Literal["hlo_module", b"hlo_module", "key", b"key"]) -> builtins.bool: ...
    def ClearField(self, field_name: typing_extensions.Literal["executable", b"executable", "hlo_module", b"hlo_module", "key", b"key"]) -> None: ...

global___XlaSerializedCacheEntry = XlaSerializedCacheEntry
