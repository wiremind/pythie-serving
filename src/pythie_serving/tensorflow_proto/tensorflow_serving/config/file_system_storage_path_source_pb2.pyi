"""
@generated by mypy-protobuf.  Do not edit manually!
isort:skip_file
"""
import builtins
import google.protobuf.descriptor
import google.protobuf.internal.containers
import google.protobuf.message
import typing
import typing_extensions

DESCRIPTOR: google.protobuf.descriptor.FileDescriptor

class FileSystemStoragePathSourceConfig(google.protobuf.message.Message):
    """Config proto for FileSystemStoragePathSource."""
    DESCRIPTOR: google.protobuf.descriptor.Descriptor
    class ServableVersionPolicy(google.protobuf.message.Message):
        """A policy that dictates which version(s) of a servable should be served."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        class Latest(google.protobuf.message.Message):
            """Serve the latest versions (i.e. the ones with the highest version
            numbers), among those found on disk.

            This is the default policy, with the default number of versions as 1.
            """
            DESCRIPTOR: google.protobuf.descriptor.Descriptor
            NUM_VERSIONS_FIELD_NUMBER: builtins.int
            num_versions: builtins.int
            """Number of latest versions to serve. (The default is 1.)"""

            def __init__(self,
                *,
                num_versions: builtins.int = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["num_versions",b"num_versions"]) -> None: ...

        class All(google.protobuf.message.Message):
            """Serve all versions found on disk."""
            DESCRIPTOR: google.protobuf.descriptor.Descriptor
            def __init__(self,
                ) -> None: ...

        class Specific(google.protobuf.message.Message):
            """Serve a specific version (or set of versions).

            This policy is useful for rolling back to a specific version, or for
            canarying a specific version while still serving a separate stable
            version.
            """
            DESCRIPTOR: google.protobuf.descriptor.Descriptor
            VERSIONS_FIELD_NUMBER: builtins.int
            @property
            def versions(self) -> google.protobuf.internal.containers.RepeatedScalarFieldContainer[builtins.int]:
                """The version numbers to serve."""
                pass
            def __init__(self,
                *,
                versions: typing.Optional[typing.Iterable[builtins.int]] = ...,
                ) -> None: ...
            def ClearField(self, field_name: typing_extensions.Literal["versions",b"versions"]) -> None: ...

        LATEST_FIELD_NUMBER: builtins.int
        ALL_FIELD_NUMBER: builtins.int
        SPECIFIC_FIELD_NUMBER: builtins.int
        @property
        def latest(self) -> global___FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest: ...
        @property
        def all(self) -> global___FileSystemStoragePathSourceConfig.ServableVersionPolicy.All: ...
        @property
        def specific(self) -> global___FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific: ...
        def __init__(self,
            *,
            latest: typing.Optional[global___FileSystemStoragePathSourceConfig.ServableVersionPolicy.Latest] = ...,
            all: typing.Optional[global___FileSystemStoragePathSourceConfig.ServableVersionPolicy.All] = ...,
            specific: typing.Optional[global___FileSystemStoragePathSourceConfig.ServableVersionPolicy.Specific] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["all",b"all","latest",b"latest","policy_choice",b"policy_choice","specific",b"specific"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["all",b"all","latest",b"latest","policy_choice",b"policy_choice","specific",b"specific"]) -> None: ...
        def WhichOneof(self, oneof_group: typing_extensions.Literal["policy_choice",b"policy_choice"]) -> typing.Optional[typing_extensions.Literal["latest","all","specific"]]: ...

    class ServableToMonitor(google.protobuf.message.Message):
        """A servable name and base path to look for versions of the servable."""
        DESCRIPTOR: google.protobuf.descriptor.Descriptor
        SERVABLE_NAME_FIELD_NUMBER: builtins.int
        BASE_PATH_FIELD_NUMBER: builtins.int
        SERVABLE_VERSION_POLICY_FIELD_NUMBER: builtins.int
        servable_name: typing.Text
        """The servable name to supply in aspired-versions callback calls. Child
        paths of 'base_path' are considered to be versions of this servable.
        """

        base_path: typing.Text
        """The path to monitor, i.e. look for child paths of the form base_path/123."""

        @property
        def servable_version_policy(self) -> global___FileSystemStoragePathSourceConfig.ServableVersionPolicy:
            """The policy to determines the number of versions of the servable to be
            served at the same time.
            """
            pass
        def __init__(self,
            *,
            servable_name: typing.Text = ...,
            base_path: typing.Text = ...,
            servable_version_policy: typing.Optional[global___FileSystemStoragePathSourceConfig.ServableVersionPolicy] = ...,
            ) -> None: ...
        def HasField(self, field_name: typing_extensions.Literal["servable_version_policy",b"servable_version_policy"]) -> builtins.bool: ...
        def ClearField(self, field_name: typing_extensions.Literal["base_path",b"base_path","servable_name",b"servable_name","servable_version_policy",b"servable_version_policy"]) -> None: ...

    SERVABLES_FIELD_NUMBER: builtins.int
    SERVABLE_NAME_FIELD_NUMBER: builtins.int
    BASE_PATH_FIELD_NUMBER: builtins.int
    FILE_SYSTEM_POLL_WAIT_SECONDS_FIELD_NUMBER: builtins.int
    FAIL_IF_ZERO_VERSIONS_AT_STARTUP_FIELD_NUMBER: builtins.int
    SERVABLE_VERSIONS_ALWAYS_PRESENT_FIELD_NUMBER: builtins.int
    @property
    def servables(self) -> google.protobuf.internal.containers.RepeatedCompositeFieldContainer[global___FileSystemStoragePathSourceConfig.ServableToMonitor]:
        """The servables to monitor for new versions, and aspire."""
        pass
    servable_name: typing.Text
    """A single servable name/base_path pair to monitor.
    DEPRECATED: Use 'servables' instead.
    TODO(b/30898016): Stop using these fields, and ultimately remove them here.
    """

    base_path: typing.Text
    file_system_poll_wait_seconds: builtins.int
    """How long to wait between file-system polling to look for children of
    'base_path', in seconds.

    If set to zero, filesystem will be polled exactly once. If set to a
    negative value (for testing use only), polling will be entirely disabled.
    """

    fail_if_zero_versions_at_startup: builtins.bool
    """If true, then FileSystemStoragePathSource::Create() and ::UpdateConfig()
    fail if, for any configured servables, the file system doesn't currently
    contain at least one version under the base path.
    (Otherwise, it will emit a warning and keep pinging the file system to
    check for a version to appear later.)
    DEPRECATED: Use 'servable_versions_always_present' instead, which includes
    this behavior.
    TODO(b/30898016): Remove 2019-10-31 or later.
    """

    servable_versions_always_present: builtins.bool
    """If true, the servable is always expected to exist on the underlying
    filesystem. FileSystemStoragePathSource::Create() and ::UpdateConfig() will
    fail if, for any configured servables, the file system doesn't currently
    contain at least one version under the base path. In addition, if a polling
    loop find the base path empty, it will not unload existing servables.
    """

    def __init__(self,
        *,
        servables: typing.Optional[typing.Iterable[global___FileSystemStoragePathSourceConfig.ServableToMonitor]] = ...,
        servable_name: typing.Text = ...,
        base_path: typing.Text = ...,
        file_system_poll_wait_seconds: builtins.int = ...,
        fail_if_zero_versions_at_startup: builtins.bool = ...,
        servable_versions_always_present: builtins.bool = ...,
        ) -> None: ...
    def ClearField(self, field_name: typing_extensions.Literal["base_path",b"base_path","fail_if_zero_versions_at_startup",b"fail_if_zero_versions_at_startup","file_system_poll_wait_seconds",b"file_system_poll_wait_seconds","servable_name",b"servable_name","servable_versions_always_present",b"servable_versions_always_present","servables",b"servables"]) -> None: ...
global___FileSystemStoragePathSourceConfig = FileSystemStoragePathSourceConfig
